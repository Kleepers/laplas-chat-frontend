/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as LoginRouteImport } from './routes/login'
import { Route as MainRouteImport } from './routes/_main'
import { Route as IndexRouteImport } from './routes/index'
import { Route as MainUsersRouteImport } from './routes/_main/users'
import { Route as MainProfileRouteImport } from './routes/_main/profile'
import { Route as MainOrganizationRouteImport } from './routes/_main/organization'
import { Route as MainMembersRouteImport } from './routes/_main.members'
import { Route as MainDashboardRouteImport } from './routes/_main/dashboard'
import { Route as MainAnalyticsRouteImport } from './routes/_main.analytics'

const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const MainRoute = MainRouteImport.update({
  id: '/_main',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const MainUsersRoute = MainUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => MainRoute,
} as any)
const MainProfileRoute = MainProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => MainRoute,
} as any)
const MainOrganizationRoute = MainOrganizationRouteImport.update({
  id: '/organization',
  path: '/organization',
  getParentRoute: () => MainRoute,
} as any)
const MainMembersRoute = MainMembersRouteImport.update({
  id: '/members',
  path: '/members',
  getParentRoute: () => MainRoute,
} as any)
const MainDashboardRoute = MainDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => MainRoute,
} as any)
const MainAnalyticsRoute = MainAnalyticsRouteImport.update({
  id: '/analytics',
  path: '/analytics',
  getParentRoute: () => MainRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/analytics': typeof MainAnalyticsRoute
  '/dashboard': typeof MainDashboardRoute
  '/members': typeof MainMembersRoute
  '/organization': typeof MainOrganizationRoute
  '/profile': typeof MainProfileRoute
  '/users': typeof MainUsersRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/analytics': typeof MainAnalyticsRoute
  '/dashboard': typeof MainDashboardRoute
  '/members': typeof MainMembersRoute
  '/organization': typeof MainOrganizationRoute
  '/profile': typeof MainProfileRoute
  '/users': typeof MainUsersRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_main': typeof MainRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/_main/analytics': typeof MainAnalyticsRoute
  '/_main/dashboard': typeof MainDashboardRoute
  '/_main/members': typeof MainMembersRoute
  '/_main/organization': typeof MainOrganizationRoute
  '/_main/profile': typeof MainProfileRoute
  '/_main/users': typeof MainUsersRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/register'
    | '/analytics'
    | '/dashboard'
    | '/members'
    | '/organization'
    | '/profile'
    | '/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/register'
    | '/analytics'
    | '/dashboard'
    | '/members'
    | '/organization'
    | '/profile'
    | '/users'
  id:
    | '__root__'
    | '/'
    | '/_main'
    | '/login'
    | '/register'
    | '/_main/analytics'
    | '/_main/dashboard'
    | '/_main/members'
    | '/_main/organization'
    | '/_main/profile'
    | '/_main/users'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  MainRoute: typeof MainRouteWithChildren
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_main': {
      id: '/_main'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MainRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_main/users': {
      id: '/_main/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof MainUsersRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/profile': {
      id: '/_main/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof MainProfileRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/organization': {
      id: '/_main/organization'
      path: '/organization'
      fullPath: '/organization'
      preLoaderRoute: typeof MainOrganizationRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/members': {
      id: '/_main/members'
      path: '/members'
      fullPath: '/members'
      preLoaderRoute: typeof MainMembersRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/dashboard': {
      id: '/_main/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof MainDashboardRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/analytics': {
      id: '/_main/analytics'
      path: '/analytics'
      fullPath: '/analytics'
      preLoaderRoute: typeof MainAnalyticsRouteImport
      parentRoute: typeof MainRoute
    }
  }
}

interface MainRouteChildren {
  MainAnalyticsRoute: typeof MainAnalyticsRoute
  MainDashboardRoute: typeof MainDashboardRoute
  MainMembersRoute: typeof MainMembersRoute
  MainOrganizationRoute: typeof MainOrganizationRoute
  MainProfileRoute: typeof MainProfileRoute
  MainUsersRoute: typeof MainUsersRoute
}

const MainRouteChildren: MainRouteChildren = {
  MainAnalyticsRoute: MainAnalyticsRoute,
  MainDashboardRoute: MainDashboardRoute,
  MainMembersRoute: MainMembersRoute,
  MainOrganizationRoute: MainOrganizationRoute,
  MainProfileRoute: MainProfileRoute,
  MainUsersRoute: MainUsersRoute,
}

const MainRouteWithChildren = MainRoute._addFileChildren(MainRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  MainRoute: MainRouteWithChildren,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
